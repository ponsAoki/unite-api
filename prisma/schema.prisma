// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

enum ProgramingSkill {
  // HTML
  HTML
  // CSS
  CSS
  // JavaScript
  JAVA_SCRIPT
  // TypeScript
  TYPE_SCRIPT
  // Python
  PYTHON
  // C
  C
  // C#
  C_SHARP
  // C++
  C_PLUSPLUS
  // Objective-C
  OBJECTIVE_C
  // Java
  JAVA
  // VBScript
  VB_SCRIPT
  // COBOL
  COBOL
  // Perl
  PERL
  // PHP
  PHP
  // Ruby
  RUBY
  // Go
  GO
  // Rust
  RUST
  // R
  R
  // Swift
  SWIFT
  // Dart
  DART
  // SQL
  SQL
  // No SQL
  NO_SQL
  // Docker
  DOCKER
  // Kubernetes
  KUBERNETES
  // Google Cloud Platform
  GCP
  // Amazon Web Service
  AWS
  // Git
  GIT
}

model DevelopmentExperience {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id])
}

model InternshipExperience {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id])
}

model User {
  id                      String                   @id @default(cuid())
  firebaseUID             String?                  @unique
  name                    String?
  email                   String                   @unique
  imageUrl                String?                  @db.VarChar(2000)
  age                     Int?
  prefecture              String?
  university              String?
  undergraduate           String?
  selfPublicity           String?
  careerVision            String?
  graduateYear            String?
  githubAccount           String?
  programingSkills        Json?
  developmentExperience   DevelopmentExperience?
  internshipExperience    InternshipExperience?
  userRecruitParticipant  UserRecruitParticipant[]
  userRecruits            UserRecruit[]
  comments                Comment[]
  userRecruitApplications UserRecruitApplication[]
  chatParticipants        ChatRoomParticipant[]
  userToRecruitLike       UserToRecruitLike[]
}

model UserRecruitApplication {
  id          String @id @default(cuid())
  applicantId String
  recruitId   String

  applicant User        @relation(fields: [applicantId], references: [id])
  recruit   UserRecruit @relation(fields: [recruitId], references: [id], onDelete: Cascade)

  @@unique([applicantId, recruitId])
}

model UserRecruitParticipant {
  id            String  @id @default(cuid())
  userId        String
  userRecruitId String
  isApproved    Boolean @default(false)

  user    User        @relation(fields: [userId], references: [id])
  recruit UserRecruit @relation(fields: [userRecruitId], references: [id], onDelete: Cascade)
}

model UserRecruit {
  id                      String                   @id @default(cuid())
  hackthonName            String?
  headline                String
  details                 String?                  @db.VarChar(500)
  programingSkills        Json
  developmentPeriod       String?
  hackathonUrl            String?
  numberOfApplicants      String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  recruiterId             String
  userRecruitApplications UserRecruitApplication[]
  userRecruitParticipant  UserRecruitParticipant[]
  product                 Product[]
  recruiter               User                     @relation(fields: [recruiterId], references: [id])
  userToRecruitLikes      UserToRecruitLike[]
}

model ChatRoom {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ChatRoomParticipant[]
  messages     ChatRoomMessage[]
}

model ChatRoomParticipant {
  id     String  @id @default(cuid())
  roomId String
  userId String?

  room     ChatRoom          @relation(fields: [roomId], references: [id])
  user     User?             @relation(fields: [userId], references: [id])
  messages ChatRoomMessage[]
}

model ChatRoomMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text()
  roomId    String
  senderId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room   ChatRoom            @relation(fields: [roomId], references: [id])
  sender ChatRoomParticipant @relation(fields: [senderId], references: [id])
}

model Corporation {
  id                    String     @id @default(cuid())
  sharedPassword        String?    @unique
  name                  String?
  email                 String     @unique
  imageUrl              String?
  descriptionOfBusiness String?    @db.Text()
  location              String?
  phoneNumber           String?
  employees             Employee[]
}

model Employee {
  id                  String                  @id @default(cuid())
  firebaseUID         String?                 @unique
  corporationId       String
  name                String?
  email               String                  @unique
  imageUrl            String?                 @db.VarChar(2000)
  introduction        String?                 @db.VarChar(2000)
  phoneNumber         String?
  likesForProduct     EmployeeToProductLike[]
  belongToCorporation Corporation             @relation(fields: [corporationId], references: [id])
}

model Product {
  id                      String                  @id @default(cuid())
  recruitId               String                  @unique
  name                    String
  skills                  Json
  reasonForSkillSelection String                  @db.VarChar(1000)
  developmentBackground   String                  @db.VarChar(1000)
  overview                String                  @db.VarChar(2000)
  url                     String                  @db.VarChar(2000)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  comment                 Comment[]
  employeeToProductLikes  EmployeeToProductLike[]
  periodLikeSum           PeriodLikeSum[]
  recruit                 UserRecruit             @relation(fields: [recruitId], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(cuid())
  productId String
  userId    String
  content   String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model UserToRecruitLike {
  id        String      @id @default(cuid())
  recruitId String
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  recruit   UserRecruit @relation(fields: [recruitId], references: [id], onDelete: Cascade)
}

model EmployeeToProductLike {
  id         String   @id @default(cuid())
  employeeId String
  productId  String
  createdAt  DateTime @default(now())
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model PeriodLikeSum {
  id         String   @id @default(cuid())
  productId  String
  likesCount Int
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
