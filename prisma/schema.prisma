// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL_DEV")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

enum ProgramingSkill {
  // HTML
  HTML
  // CSS
  CSS
  // JavaScript
  JAVA_SCRIPT
  // TypeScript
  TYPE_SCRIPT
  // Python
  PYTHON
  // C
  C
  // C#
  C_SHARP
  // C++
  C_PLUSPLUS
  // Objective-C
  OBJECTIVE_C
  // Java
  JAVA
  // VBScript
  VB_SCRIPT
  // COBOL
  COBOL
  // Perl
  PERL
  // PHP
  PHP
  // Ruby
  RUBY
  // Go
  GO
  // Rust
  RUST
  // R
  R
  // Swift
  SWIFT
  // Dart
  DART
  // SQL
  SQL
  // No SQL
  NO_SQL
  // Docker
  DOCKER
  // Kubernetes
  KUBERNETES
  // Google Cloud Platform
  GCP
  // Amazon Web Service
  AWS
  // Git
  GIT
}

model DevelopmentExperience {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id])
}

model InternshipExperience {
  id     String @id @default(cuid())
  userId String @unique

  user User @relation(fields: [userId], references: [id])
}

model User {
  id                    String                 @id @default(cuid())
  firebaseUID           String?                @unique
  name                  String?
  email                 String                 @unique
  imageUrl              String?
  age                   Int?
  prefecture            String?
  university            String?
  undergraduate         String?
  selfPublicity         String?
  careerVision          String?
  programingSkills      Json?
  developmentExperience DevelopmentExperience?
  internshipExperience  InternshipExperience?
  userRecruitApplicants UserRecruitApplicant[]
  userRecruits          UserRecruit[]
}

model UserRecruitApplicant {
  id            String @id @default(cuid())
  userId        String
  userRecruitId String

  user    User        @relation(fields: [userId], references: [id])
  recruit UserRecruit @relation(fields: [userRecruitId], references: [id])

  @@unique([userId, userRecruitId])
}

model UserRecruit {
  id                    String                 @id @default(cuid())
  hackthonName          String?
  headline              String
  details               String?                @db.VarChar(500)
  programingSkills      Json
  developmentPeriod     String?
  hackathonUrl          String?
  numberOfApplicants    String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  recruiterId           String
  userRecruitApplicants UserRecruitApplicant[]

  recruiter User @relation(fields: [recruiterId], references: [id])
}


model Corporation {
  id                    String                 @id @default(cuid())
  sharedPassword        String?
  name                  String?
  email                 String                 @unique
  imageUrl              String?
  DescriptionOfBusiness String?                @db.Text()
  location              String?
  phoneNumber           String?
  employees             Employee[]
}

model Employee {
  id                    String                 @id @default(cuid())
  firebaseUID           String?                @unique
  corporationId         String
  name                  String?
  email                 String                 @unique
  imageUrl              String?
  introduction          String?                @db.VarChar(2000)
  phoneNumber           String?
  belongToCorporation   Corporation @relation(fields: [corporationId], references: [id])
}
